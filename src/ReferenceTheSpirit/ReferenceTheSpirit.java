/**
 * ReferenceTheSpirit.java -- Scriptural referencing application from different 
 * sources.
 * @author NoFac3
 */
package ReferenceTheSpirit;

import javax.swing.JComboBox;   // program uses class JComboBox
import javax.swing.JTextArea;   // program uses class JTextArea
import javax.swing.JTextField;  // program uses class JTextField
import javax.swing.*;           // program uses Swing class Library
import java.awt.*;              // program uses AWT class Library
import java.awt.Font;           // program uses class Font
import java.awt.datatransfer.StringSelection;// program uses class StringSelection
import java.awt.Toolkit;                     // program uses class ToolKit
import java.awt.datatransfer.Clipboard;      // program uses class Clipboard
import java.util.logging.Level;              // program uses class Level
import java.util.logging.Logger;             // program uses class Logger
import javax.swing.text.BadLocationException;// program uses class BadLocationException

public class ReferenceTheSpirit extends javax.swing.JFrame {

    boolean blnDefaultColor = false;
    /**
     * Creates new form ReferenceTheSpirit
     */
    public ReferenceTheSpirit() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlBible = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        txtBible = new javax.swing.JTextArea();
        btnChapterPrevious = new javax.swing.JButton();
        btnChapterNext = new javax.swing.JButton();
        cmbVerse = new javax.swing.JComboBox<>();
        lblVerseSearch = new javax.swing.JLabel();
        lblBookSearch = new javax.swing.JLabel();
        cmbTranslation = new javax.swing.JComboBox<>();
        lblTranslation = new javax.swing.JLabel();
        cmbBook = new javax.swing.JComboBox<>();
        lblChapterSearch = new javax.swing.JLabel();
        cmbChapter = new javax.swing.JComboBox<>();
        lblSource = new javax.swing.JLabel();
        cmbSource = new javax.swing.JComboBox<>();
        lblBookSearch3 = new javax.swing.JLabel();
        cmbText = new javax.swing.JComboBox<>();
        pnlTextSize = new javax.swing.JPanel();
        tabSearch = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        txtKeyword = new javax.swing.JTextField();
        btnKeywordSearch = new javax.swing.JButton();
        jScrollPane10 = new javax.swing.JScrollPane();
        txtKeywordVerses = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        txtTheme = new javax.swing.JTextField();
        btnThemeSearch = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        txtThemeVerses = new javax.swing.JTextArea();
        cmbThemeTranslation = new javax.swing.JComboBox<>();
        lblThemeTranslation = new javax.swing.JLabel();
        pnlCitation = new javax.swing.JPanel();
        cmbCitation = new javax.swing.JComboBox<>();
        lblCitationFormat = new javax.swing.JLabel();
        lblCitationVerseStart = new javax.swing.JLabel();
        cmbVerseStart = new javax.swing.JComboBox<>();
        cmbVerseEnd = new javax.swing.JComboBox<>();
        lblCitationVerseEnd = new javax.swing.JLabel();
        btnCitation = new javax.swing.JButton();
        btnCopy = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtCitation = new javax.swing.JTextArea();
        btnDarkMode = new javax.swing.JButton();
        btnTextSizeIncrease = new javax.swing.JButton();
        lblTextSize = new javax.swing.JLabel();
        btnTextSizeDecrease = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(1000, 1000));

        pnlBible.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        txtBible.setEditable(false);
        txtBible.setColumns(20);
        txtBible.setLineWrap(true);
        txtBible.setRows(5);
        txtBible.setText("1  In the beginning God created the heaven and the earth.\n\n2  And the earth was without form, and void; and darkness was on the face of the deep. And the Spirit of God moved on the face of the waters.\n\n3  And God said, Let there be light: and there was light.\n\n4  And God saw the light, that it was good: and God divided the light from the darkness.\n\n5  And God called the light Day, and the darkness he called Night. And the evening and the morning were the first day.\n\n6  And God said, Let there be a firmament in the middle of the waters, and let it divide the waters from the waters.\n\n7  And God made the firmament, and divided the waters which were under the firmament from the waters which were above the firmament: and it was so.\n\n8  And God called the firmament Heaven. And the evening and the morning were the second day.\n\n9  And God said, Let the waters under the heaven be gathered together to one place, and let the dry land appear: and it was so.\n\n10  And God called the dry land Earth; and the gathering together of the waters called he Seas: and God saw that it was good.\n\n11  And God said, Let the earth bring forth grass, the herb yielding seed, and the fruit tree yielding fruit after his kind, whose seed is in itself, on the earth: and it was so.\n\n12  And the earth brought forth grass, and herb yielding seed after his kind, and the tree yielding fruit, whose seed was in itself, after his kind: and God saw that it was good.\n\n13  And the evening and the morning were the third day.\n\n14  And God said, Let there be lights in the firmament of the heaven to divide the day from the night; and let them be for signs, and for seasons, and for days, and years:\n\n15  And let them be for lights in the firmament of the heaven to give light on the earth: and it was so.\n\n16  And God made two great lights; the greater light to rule the day, and the lesser light to rule the night: he made the stars also.\n\n17  And God set them in the firmament of the heaven to give light on the earth,\n\n18  And to rule over the day and over the night, and to divide the light from the darkness: and God saw that it was good.\n\n19  And the evening and the morning were the fourth day.\n\n20  And God said, Let the waters bring forth abundantly the moving creature that has life, and fowl that may fly above the earth in the open firmament of heaven.\n\n21  And God created great whales, and every living creature that moves, which the waters brought forth abundantly, after their kind, and every winged fowl after his kind: and God saw that it was good.\n\n22  And God blessed them, saying, Be fruitful, and multiply, and fill the waters in the seas, and let fowl multiply in the earth.\n\n23  And the evening and the morning were the fifth day.\n\n24  And God said, Let the earth bring forth the living creature after his kind, cattle, and creeping thing, and beast of the earth after his kind: and it was so.\n\n25  And God made the beast of the earth after his kind, and cattle after their kind, and every thing that creeps on the earth after his kind: and God saw that it was good.\n\n26  And God said, Let us make man in our image, after our likeness: and let them have dominion over the fish of the sea, and over the fowl of the air, and over the cattle, and over all the earth, and over every creeping thing that creeps on the earth.\n\n27  So God created man in his own image, in the image of God created he him; male and female created he them.\n\n28  And God blessed them, and God said to them, Be fruitful, and multiply, and replenish the earth, and subdue it: and have dominion over the fish of the sea, and over the fowl of te air, and over every living thing that moves on the earth.\n\n29  And God said, Behold, I have given you every herb bearing seed, which is on the face of all the earth, and every tree, in the which is the fruit of a tree yielding seed; to you it shall for meat.\n\n30  And to every beast of the earth, and to every fowl of the air, and to every thing that creeps on the earth, wherein there is life, I have given every green herb for meat: and it was so.\n\n31  And God saw every thing that he had made, and, behold, it was very good. And the evening and the morning were the sixth day.\n\n\n");
        txtBible.setWrapStyleWord(true);
        txtBible.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtBibleMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(txtBible);
        txtBible.setCaretPosition(0);

        btnChapterPrevious.setText("<");
        btnChapterPrevious.setToolTipText("Previous Chapter");
        btnChapterPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChapterPreviousActionPerformed(evt);
            }
        });

        btnChapterNext.setText(">");
        btnChapterNext.setToolTipText("Next Chapter");
        btnChapterNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChapterNextActionPerformed(evt);
            }
        });

        cmbVerse.setEditable(true);
        cmbVerse.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        cmbVerse.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbVerseItemStateChanged(evt);
            }
        });

        lblVerseSearch.setText("Verse");

        lblBookSearch.setText("Book");

        cmbTranslation.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AKJV", "ASV", "CPDV", "DBT", "DRB", "ERV", "JPS_WEY", "KJV", "SLT", "WBT", "WEB", "YLT" }));
        cmbTranslation.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbTranslationItemStateChanged(evt);
            }
        });

        lblTranslation.setText("Translation");
        lblTranslation.setToolTipText("");

        cmbBook.setEditable(true);
        cmbBook.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Genesis", "Exodus", "Leviticus", "Numbers", "Deuteronomy", "Joshua", "Judges", "Ruth", "1 Samuel", "2 Samuel", "1 Kings", "2 Kings", "1 Chronicles", "2 Chronicles", "Ezra", "Nehemiah", "Esther", "Job", "Psalms", "Proverbs", "Ecclesiastes", "Song of Solomon", "Isaiah", "Jeremiah", "Lamentations", "Ezekiel", "Daniel", "Hosea", "Joel", "Amos", "Obadiah", "Jonah", "Micah", "Nahum", "Habakkuk", "Zephaniah", "Haggai", "Zechariah", "Malachi", "Matthew", "Mark", "Luke", "John", "Acts", "Romans", "1 Corinthians", "2 Corinthians", "Galatians", "Ephesians", "Philippians", "Colossians", "1 Thessalonians", "2 Thessalonians", "1 Timothy", "2 Timothy", "Titus", "Philemon", "Hebrews", "James", "1 Peter", "2 Peter", "1 John", "2 John", "3 John", "Jude", "Revelation" }));
        cmbBook.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbBookItemStateChanged(evt);
            }
        });

        lblChapterSearch.setText("Chapter");

        cmbChapter.setEditable(true);
        cmbChapter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50" }));
        cmbChapter.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbChapterItemStateChanged(evt);
            }
        });

        lblSource.setText("Source");

        cmbSource.setEditable(true);
        cmbSource.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Christianity", "Hinduism", "Islam" }));
        cmbSource.setSelectedIndex(2);
        cmbSource.setSelectedItem("Christianity");
        cmbSource.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbSourceItemStateChanged(evt);
            }
        });

        lblBookSearch3.setText("Text");

        cmbText.setEditable(true);
        cmbText.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Bible", "Apocrypha" }));
        cmbText.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbTextItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout pnlBibleLayout = new javax.swing.GroupLayout(pnlBible);
        pnlBible.setLayout(pnlBibleLayout);
        pnlBibleLayout.setHorizontalGroup(
            pnlBibleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBibleLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(pnlBibleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlBibleLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(lblSource)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbSource, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(lblBookSearch3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbText, 0, 267, Short.MAX_VALUE)
                        .addGap(24, 24, 24))
                    .addGroup(pnlBibleLayout.createSequentialGroup()
                        .addComponent(btnChapterPrevious)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlBibleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTranslation)
                            .addComponent(cmbTranslation, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlBibleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbBook, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(pnlBibleLayout.createSequentialGroup()
                                .addComponent(lblBookSearch)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlBibleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbChapter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblChapterSearch))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlBibleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblVerseSearch)
                            .addComponent(cmbVerse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)))
                .addComponent(btnChapterNext)
                .addContainerGap())
            .addComponent(jScrollPane5)
        );
        pnlBibleLayout.setVerticalGroup(
            pnlBibleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBibleLayout.createSequentialGroup()
                .addGroup(pnlBibleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBibleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblSource)
                        .addComponent(cmbSource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblBookSearch3))
                    .addComponent(cmbText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(pnlBibleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBibleLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(pnlBibleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblVerseSearch)
                            .addComponent(lblChapterSearch)))
                    .addGroup(pnlBibleLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(pnlBibleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblTranslation, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblBookSearch))))
                .addGap(4, 4, 4)
                .addGroup(pnlBibleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnChapterPrevious)
                    .addComponent(btnChapterNext)
                    .addGroup(pnlBibleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(cmbBook, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbTranslation, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlBibleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbChapter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbVerse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5))
        );

        tabSearch.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        txtKeyword.setText("Enter Keyword...");
        txtKeyword.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtKeywordMouseClicked(evt);
            }
        });
        txtKeyword.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtKeywordKeyPressed(evt);
            }
        });

        btnKeywordSearch.setText("Search");
        btnKeywordSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKeywordSearchActionPerformed(evt);
            }
        });

        txtKeywordVerses.setEditable(false);
        txtKeywordVerses.setColumns(20);
        txtKeywordVerses.setLineWrap(true);
        txtKeywordVerses.setRows(5);
        txtKeywordVerses.setToolTipText("Select verse from results to display the verses chapter.");
        txtKeywordVerses.setWrapStyleWord(true);
        txtKeywordVerses.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtKeywordVersesMouseClicked(evt);
            }
        });
        jScrollPane10.setViewportView(txtKeywordVerses);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtKeyword)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnKeywordSearch)
                .addContainerGap())
            .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 523, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtKeyword, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnKeywordSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 665, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tabSearch.addTab("KEYWORD SEARCH", jPanel2);

        txtTheme.setText("Enter Theme...");
        txtTheme.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtThemeMouseClicked(evt);
            }
        });
        txtTheme.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtThemeKeyPressed(evt);
            }
        });

        btnThemeSearch.setText("Search");
        btnThemeSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemeSearchActionPerformed(evt);
            }
        });

        txtThemeVerses.setEditable(false);
        txtThemeVerses.setColumns(20);
        txtThemeVerses.setLineWrap(true);
        txtThemeVerses.setRows(5);
        txtThemeVerses.setToolTipText("Select verse from results to display the verses chapter.");
        txtThemeVerses.setWrapStyleWord(true);
        txtThemeVerses.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtThemeVersesMouseClicked(evt);
            }
        });
        jScrollPane9.setViewportView(txtThemeVerses);

        cmbThemeTranslation.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AKJV", "ASV", "CPDV", "DBT", "DRB", "ERV", "JPS", "KJV", "SLT", "WBT", "WEB", "YLT" }));
        cmbThemeTranslation.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbThemeTranslationItemStateChanged(evt);
            }
        });

        lblThemeTranslation.setText("Translation");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane9)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(lblThemeTranslation, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbThemeTranslation, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTheme, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnThemeSearch)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTheme, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnThemeSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbThemeTranslation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblThemeTranslation))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 665, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tabSearch.addTab("BIBLICAL THEME SEARCH", jPanel3);

        pnlCitation.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        cmbCitation.setEditable(true);
        cmbCitation.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "APA", "MLA", "Turabian" }));

        lblCitationFormat.setText("Citation format");

        lblCitationVerseStart.setText("Verse Start");

        cmbVerseStart.setEditable(true);
        cmbVerseStart.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        cmbVerseStart.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbVerseStartItemStateChanged(evt);
            }
        });

        cmbVerseEnd.setEditable(true);
        cmbVerseEnd.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        lblCitationVerseEnd.setText("Verse End");

        btnCitation.setText("Cite");
        btnCitation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCitationActionPerformed(evt);
            }
        });

        btnCopy.setText("Copy");
        btnCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCopyActionPerformed(evt);
            }
        });

        txtCitation.setColumns(20);
        txtCitation.setLineWrap(true);
        txtCitation.setRows(5);
        txtCitation.setWrapStyleWord(true);
        jScrollPane2.setViewportView(txtCitation);

        javax.swing.GroupLayout pnlCitationLayout = new javax.swing.GroupLayout(pnlCitation);
        pnlCitation.setLayout(pnlCitationLayout);
        pnlCitationLayout.setHorizontalGroup(
            pnlCitationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCitationLayout.createSequentialGroup()
                .addGroup(pnlCitationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCitationLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(pnlCitationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblCitationFormat)
                            .addComponent(cmbCitation, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlCitationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbVerseStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCitationVerseStart))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlCitationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlCitationLayout.createSequentialGroup()
                                .addComponent(lblCitationVerseEnd)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(pnlCitationLayout.createSequentialGroup()
                                .addComponent(cmbVerseEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnCitation)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnCopy))))
                    .addGroup(pnlCitationLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2)))
                .addContainerGap())
        );
        pnlCitationLayout.setVerticalGroup(
            pnlCitationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCitationLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(pnlCitationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCitationLayout.createSequentialGroup()
                        .addComponent(lblCitationFormat)
                        .addGap(4, 4, 4)
                        .addComponent(cmbCitation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlCitationLayout.createSequentialGroup()
                        .addGroup(pnlCitationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCitationVerseStart)
                            .addComponent(lblCitationVerseEnd))
                        .addGap(4, 4, 4)
                        .addGroup(pnlCitationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbVerseStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbVerseEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCitation)
                            .addComponent(btnCopy))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                .addContainerGap())
        );

        btnDarkMode.setText("🔆");
        btnDarkMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDarkModeActionPerformed(evt);
            }
        });

        btnTextSizeIncrease.setText("+");
        btnTextSizeIncrease.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTextSizeIncreaseActionPerformed(evt);
            }
        });

        lblTextSize.setText("TEXT SIZE");

        btnTextSizeDecrease.setText("-");
        btnTextSizeDecrease.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTextSizeDecreaseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlTextSizeLayout = new javax.swing.GroupLayout(pnlTextSize);
        pnlTextSize.setLayout(pnlTextSizeLayout);
        pnlTextSizeLayout.setHorizontalGroup(
            pnlTextSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTextSizeLayout.createSequentialGroup()
                .addGroup(pnlTextSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlTextSizeLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnTextSizeIncrease)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblTextSize)
                        .addGap(12, 12, 12)
                        .addComponent(btnTextSizeDecrease)
                        .addGap(151, 151, 151)
                        .addComponent(btnDarkMode))
                    .addComponent(pnlCitation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(tabSearch)
        );
        pnlTextSizeLayout.setVerticalGroup(
            pnlTextSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTextSizeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlTextSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDarkMode)
                    .addComponent(btnTextSizeIncrease)
                    .addComponent(btnTextSizeDecrease)
                    .addComponent(lblTextSize))
                .addGap(8, 8, 8)
                .addComponent(tabSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 747, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlCitation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlBible, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlTextSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlBible, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlTextSize, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * txtBible Mouse Click method selects the verse line clicked on by user
     * @param evt mouse click
     */
    private void txtBibleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtBibleMouseClicked
        try // select line and check for bad location
        {
            // get location of mouse click
            int lineNumber = txtBible.getCaretPosition();
            
            // get line number of caret position
            int line = txtBible.getLineOfOffset(lineNumber);
            int startIndex = txtBible.getLineStartOffset(line);// set line start
            int endIndex = txtBible.getLineEndOffset(line);// set line end
            
            // highlight line
            txtBible.select(startIndex, endIndex);
            // check for empty line selected
            if (txtBible.getSelectedText().isBlank()==false)
            {
                // separate verse from text
                String[] txt = txtBible.getSelectedText().split("  ");//2 spaces
                int v = Integer.parseInt(txt[0].trim())-1;
                cmbVerse.setSelectedIndex(v);//update verse combo selection
            }
        } 
        catch (BadLocationException ex) // exception thrown
        {
            Logger.getLogger(ReferenceTheSpirit.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (NumberFormatException e){}//exception thrown (converthing String to int)
        catch (NullPointerException en){}// exception thown (too many blank clicks)
    }//GEN-LAST:event_txtBibleMouseClicked
    // end txtBible Mouse Clicked
    
    /**
     * btnChapterPrevious button method verifies the book to chapter count then 
     * sets the new chapter to be displayed
     * @param evt previous button ("<")
     */
    private void btnChapterPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChapterPreviousActionPerformed
        // get index of current and previous chapter
        int indx = cmbChapter.getSelectedIndex();
        int newIndex = indx - 1;
        int max = cmbChapter.getItemCount();//total chapters

        if (newIndex >= 0)// previous chapter within book
        {
            // select previous chapter and set as new chapter value
            cmbChapter.setSelectedIndex(newIndex);
        }
        else // previous chapter before book
        {
            int bookIndex = cmbBook.getSelectedIndex();// current book index
            int newBookIndex = bookIndex-1;// previous book index

            if (newBookIndex >= 0)// new book not first book
            {
                cmbChapter.setSelectedIndex(0);//set chapter to first
                cmbBook.setSelectedIndex(newBookIndex);//set book to previous

                // set chapter to the max of previous book
                cmbChapter.setSelectedIndex(cmbChapter.getItemCount()-1);
            }
            else// current book is first book
            {
                // get number of books
                int bookMax = cmbBook.getItemCount()-1;

                // select the book and chapter at begining of the text
                cmbChapter.setSelectedIndex(0);// set chapter to first
                cmbBook.setSelectedIndex(bookMax);// set book to last
                newIndex = cmbChapter.getItemCount()-1;// get new book chapters
                cmbChapter.setSelectedIndex(newIndex);// set to last chapter
            }
        }
    }//GEN-LAST:event_btnChapterPreviousActionPerformed
    // end btnChapterPrevious button method
    
    /**
     * btnChapterNext button method verifies the book to chapter count then 
     * sets the new chapter to be displayed
     * @param evt next button (">")
     */
    private void btnChapterNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChapterNextActionPerformed
        // get index of current and next chapter
        int indx = cmbChapter.getSelectedIndex();
        int newIndex = indx + 1;
        int max = cmbChapter.getItemCount();// total chapters

        if (newIndex + 1 <= max)// next chapter within book chapter max
        {
            // select next chapter and update chapter value
            cmbChapter.setSelectedIndex(newIndex);
        }
        else// new book
        {
            int bookIndex = cmbBook.getSelectedIndex();
            int newBookIndex = bookIndex + 1;
            int bookMax = cmbBook.getItemCount()-1;

            if (newBookIndex <= bookMax && newBookIndex >= 0)// end of book
            {
                // select next book, then update chapter list
                cmbBook.setSelectedIndex(newBookIndex);
                cmbChapter.setSelectedIndex(0);
            }
            else if (newBookIndex > bookMax)// reached end of text
            {
                // set book, chapter, and verse to beginning
                cmbBook.setSelectedIndex(0);
                cmbChapter.setSelectedIndex(0);
                cmbVerse.setSelectedIndex(0);
            }
        }
    }//GEN-LAST:event_btnChapterNextActionPerformed
    // end btnChapterNext button method
    
    /**
     * cmbVerse ItemStateChanged method calls updateVerseCitation to update the
     * start and end verse lists for the citation area
     * @param evt start verse index changed (citation)
     */
    private void cmbVerseItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbVerseItemStateChanged
        updateVerseCitation();
    }//GEN-LAST:event_cmbVerseItemStateChanged
    // end cmbVerse ItemStateChanged method
    
    /**
     * updateVerseCitation method matches the citation verse range with the
     * based on the main verse selection
     */
    private void updateVerseCitation()
    {
        // update start and end verse list for citation
        cmbVerseStart.setSelectedIndex(cmbVerse.getSelectedIndex());
        cmbVerseEnd.setSelectedIndex(cmbVerse.getSelectedIndex());
    }// end updateVerseCitation method
    
    /**
     * cmbTranslation ItemStateChanged method calls updateBookList or 
     * displayChapter method if the text is the same
     * @param evt new translation selected from combo box
     */
    private void cmbTranslationItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbTranslationItemStateChanged

        // get translation
        String translation = cmbTranslation.getSelectedItem().toString();
        // check translation
        if(!translation.matches("English"))//Christian source or Bible text
        {
            // get book, chapter, and verse index
            int book = cmbBook.getSelectedIndex();
            int chapter = cmbChapter.getSelectedIndex();
            int verse = cmbVerse.getSelectedIndex();
            
            // replace default values with previous
            cmbBook.setSelectedIndex(book);
            cmbChapter.setSelectedIndex(chapter);
            cmbVerse.setSelectedIndex(verse);
            displayChapter();// display chapter
        }
        else// new source or text
        {
            updateBookList();//update book list
        }
    }//GEN-LAST:event_cmbTranslationItemStateChanged
    // end cmbTranslation ItemStateChanged method
    
    /**
     * cmbBook ItemStateChanged method calls updateChapterList method to
     * to update the chapter list for the current book
     * @param evt new book selected from combo box
     */
    private void cmbBookItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbBookItemStateChanged
        updateChapterList();
    }//GEN-LAST:event_cmbBookItemStateChanged
    // end cmbBook ItemStateChanged method
    
    /**
     * cmbChapter ItemStateChanged method calls updateVerseList method to
     * to update the verse list for the current book and chapter then displays 
     * chapter
     * @param evt new chapter selected from combo box
     */
    private void cmbChapterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbChapterItemStateChanged
        updateVerseList();
    }//GEN-LAST:event_cmbChapterItemStateChanged
    // end cmbChapter ItemStateChanged method
    
    /**
     * cmbSource ItemStateChanged method calls updateTextList method to
     * to update the text list for the current source
     * @param evt new source selected from combo box
     */
    private void cmbSourceItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbSourceItemStateChanged
        updateTextList();
    }//GEN-LAST:event_cmbSourceItemStateChanged
    // end cmbSource ItemStateChanged method
    
    /**
     * cmbText ItemStateChanged method calls updateTranslationList and 
     * updateBookList methods to update the translation list for the 
     * current text
     * @param evt new Text selected from combo box
     */
    private void cmbTextItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbTextItemStateChanged
        updateTranslationList();
    }//GEN-LAST:event_cmbTextItemStateChanged
    // end cmbText ItemStateChanged method
    
    /**
     * updateTextList method updates text list when source is changed
     */
    private void updateTextList()
    {       
        // get current source
        String source = cmbSource.getSelectedItem().toString();
        
        // set subsequent text valued to start
        cmbTranslation.setSelectedIndex(0);
        cmbBook.setSelectedIndex(0);
        cmbChapter.setSelectedIndex(0);
        cmbVerse.setSelectedIndex(0);
        
        // instantiate new Index object
        Index index = new Index();
        
        // create and execute select query
        index.setList("SELECT Text FROM SourceText "+
                "WHERE Sources = '"+source+"'");
        
        // update text list with query results
        cmbText.setModel(new javax.swing.DefaultComboBoxModel<>(index.getList()));
        
        // Check for source
        if (source.equals("Christianity"))// Christianity
        {
            cmbText.setSelectedIndex(1);// set text to Bible
        }
        else// not Christianty
        {
            cmbText.setSelectedIndex(0);// default
        }
        updateTranslationList();// update translation list
    }// end updateTextList method
    
    /**
     * updateTranslationList method updates translation list when text is changed
     */
    private void updateTranslationList()
    {       
        // get current text value
        String text = cmbText.getSelectedItem().toString();// get text value
        
        // instantiate new Index object
        Index index = new Index();
        // create and execute query
        index.setList("SELECT Translations FROM TextTranslations "+
                "WHERE Text = '"+text+"' ");
        
        // get and set translation list from query results
        cmbTranslation.setModel(new javax.swing.DefaultComboBoxModel<>(index.getList()));
        cmbTranslation.setSelectedIndex(0);// set index to start
        
        updateBookList();// update book list
    }// end updateTranslationList method
    
    /**
     * updateBookList method updates the book list when text is changed 
     */
    private void updateBookList()
    {     
        // get current text value
        String text = cmbText.getSelectedItem().toString();
        // set chapter index to start
        cmbChapter.setSelectedIndex(0);
        
        // instantiate new Index object
        Index index = new Index();
        // create and execute select query
        index.setList("SELECT Books FROM TextBooks "+
                "WHERE Text = '"+text+"'");
        
        // set new book list with query results
        cmbBook.setModel(new javax.swing.DefaultComboBoxModel<>(index.getList()));
        cmbBook.setSelectedIndex(0);// set selected book to start
        
        updateChapterList();// update Chapter list
    }// end updateBookList method
    
    /**
     *  updateChapterList method updates the chapter list when the book is changed
     */
    private void updateChapterList()
    {
        // get current book value
        String book = cmbBook.getSelectedItem().toString();
        
        // instantiate new Index object
        Index index = new Index();
        
        // create and execute query
        index.setList("SELECT Chapters FROM BookChapters "+
                "WHERE Book = '"+book+"'");
        
        // get and set chapter list from query results
        cmbChapter.setModel(new javax.swing.DefaultComboBoxModel<>(index.getList()));
        updateVerseList();// update verse list
    }// end updateChapterMethod
    
    /**
     * updateVerseList method for updating the verse list base on the current 
     * chapter then displays the chapter
     */
    private void updateVerseList()
    {       
        // get current chapter values
        String book = cmbBook.getSelectedItem().toString();
        String chapter = cmbChapter.getSelectedItem().toString();

        // instantiate new Index object
        Index index = new Index();

        // create and execute query
        index.setList("SELECT Verses FROM ChapterVerses "+
                "WHERE Book = '"+book+"' AND Chapter = '"+chapter+"' ");

        // get verse list
        String[] verseList = index.getList();

        // update verse combo boxes for main and citation
        cmbVerse.setModel(new javax.swing.DefaultComboBoxModel<>(verseList));
        cmbVerseStart.setModel(new javax.swing.DefaultComboBoxModel<>(verseList));
        cmbVerseEnd.setModel(new javax.swing.DefaultComboBoxModel<>(verseList));
        
        // display chapter
        displayChapter();
    }// end updateVerseList method
    
    /**
     * cmbVerseStart ItemStateChanged method adjusts end verse when start verse 
     * is greater.
     * @param evt start verse index changed (citation)
     */
    private void cmbVerseStartItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbVerseStartItemStateChanged
        alignCitationVerses(cmbVerseStart,cmbVerseEnd);
    }//GEN-LAST:event_cmbVerseStartItemStateChanged
    // end cmbVerseStart ItemStateChanged method
    
    /**
     * displayChapter method queries for selected text values and displays the 
     * selected chapter text.
     */
    private void displayChapter() 
    {
        // get and set book values
        String text = cmbText.getSelectedItem().toString();
        String translation = cmbTranslation.getSelectedItem().toString();
        String book = cmbBook.getSelectedItem().toString();
        String chapter = cmbChapter.getSelectedItem().toString();
        String verse = cmbVerse.getSelectedItem().toString();
        
        txtBible.setText("");// clear chapter text
        
        // instantiate new Query object
        Query query = new Query();
        
        // execute query for chapter text
        query.setChapterText(text,translation,book,Integer.parseInt(chapter));
        
        // get chapter text
        String[] chapterText = query.getChapterText();
        
        int i = 1;// verse count
        // append verses to text area
        for (String verses: chapterText)
        {
            txtBible.append(i + "  " + verses+"\n\n");
            i++;// increase verse count
        }
        
        // set text position to selected verse
        txtBible.setCaretPosition(Integer.parseInt(verse)-1);
        
        txtKeywordVerses.setText("");// clear keyword search
        
    }// end displayChapter method
    
    /**
     * btnCitation button method calls citation class to form and display the 
     * verses to be sited
     * @param evt button (citation)
     */
    private void btnCitationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCitationActionPerformed
        // get and set book values
        String source = cmbSource.getSelectedItem().toString();
        String text = cmbText.getSelectedItem().toString();
        String translation = cmbTranslation.getSelectedItem().toString();
        String book = cmbBook.getSelectedItem().toString();
        String chapter = cmbChapter.getSelectedItem().toString();
        String verse = cmbVerse.getSelectedItem().toString();
        String citationFormat = cmbCitation.getSelectedItem().toString();
        String startVerse = cmbVerseStart.getSelectedItem().toString();
        String endVerse = cmbVerseEnd.getSelectedItem().toString();

        // get and set verse range
        String[] strVerseRange = {startVerse,endVerse};
        int[] verseRange = {
            Integer.parseInt(startVerse),
            Integer.parseInt(endVerse)};

        // get chepter text from main text area
        String chapterText = txtBible.getText();

        // instantiate new Citation object to generate citation
        Citation cite = new Citation(citationFormat, chapterText, source, text,translation, book, chapter, strVerseRange, verseRange);

        // display citation
        txtCitation.setText(cite.toString());
    }//GEN-LAST:event_btnCitationActionPerformed
    // end btnCitation button method
    
    /**
     * btnCopy button method calls copyText method to copy the text in the 
     * citation text area.
     * @param evt button (citation)
     */
    private void btnCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCopyActionPerformed
        copyText(txtCitation);
    }//GEN-LAST:event_btnCopyActionPerformed
    // end btnCopy button method
    
    /**
     * txtKeyword MouseClicked method for clearing the Keyword search box when 
     * the mouse clicks it
     * @param evt mouse click (Keyword)
     */
    private void txtKeywordMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtKeywordMouseClicked
        clearTextBox(txtKeyword);
    }//GEN-LAST:event_txtKeywordMouseClicked
    // end txtKeyword MouseCLicked method
    
    /**
     * txtKeyword KeyPressed method activates search when enter is pressed in 
     * key word text area
     * @param evt keys (Keyword)
     */
    private void txtKeywordKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtKeywordKeyPressed
        isEnterKey(evt,btnKeywordSearch);
    }//GEN-LAST:event_txtKeywordKeyPressed
    //end txtKeyword KeyPressed method
    
    /**
     * btnKeywordSearch button method for querying database for keywords in verses
     * @param evt search button pressed (Keyword)
     */
    private void btnKeywordSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKeywordSearchActionPerformed
        // get current source and text
        String source = cmbSource.getSelectedItem().toString();
        String text = cmbText.getSelectedItem().toString();
        // get selected translation and search word fro Keyword tab
        String translation = cmbTranslation.getSelectedItem().toString();
        String word = txtKeyword.getText();

        txtKeywordVerses.setText("");// clear text area

        if (word.contains("Enter Keyword..."))// default value still in text field
        {
            // remove default value
            word = word.replace("Enter Keyword...","");
            txtKeyword.setText(word);// replace entry
        }
        try// query database for word and check for SQL exceptions
        {
            if (!word.equals("") || !word.equals(null))
            {
                // instantiate new Keyword object
                Keyword key = new Keyword(word,text,translation);
                
                // get matching verses
                String[] results = key.getVerses();
                String[][] data = key.getData();

                if (data.length>0)// check if query is null
                {
                    // Append verses to text area
                    for (int i = 0; i<data.length;i++)
                    {
                        if (!data[i][3].equals(""))
                        {
                            // format data into verse format
                            String line =
                            data[i][0]+"  "+data[i][1]+":"+data[i][2]+
                            "   "+data[i][3]+"\n\n";
                            
                            // add verse to text area
                            txtKeywordVerses.append(line);
                        }
                    }
                    // scroll to top of results
                    txtKeywordVerses.setCaretPosition(0);
                }
                else// no word entered into search
                {
                    String message = "Search input is empty.";
                    String results1 = message+ "\nEnter a word to search.";
                    txtKeywordVerses.append(results1);
                }
            }
        } 
        catch (NullPointerException e)// null search results, exception thrown
        {
            String message = "There are no results for the term \"" + word + "\"";
            String results1 = message+ "\nSearch for somethong else.";
            txtKeywordVerses.append(results1);
        }
    }//GEN-LAST:event_btnKeywordSearchActionPerformed
    // end btnKeywordSearch button method
    
   // end btnKeywordOpen button method
    
    /**
     * txtKeyword Mouse Click method selects the verse line clicked on by user 
     * then calls updateSearch method to open the chapter text of verse
     * @param evt mouse click (Keyword)
     */
    private void txtKeywordVersesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtKeywordVersesMouseClicked
       
        try // select line and check for bad location
        {
            // get location of mouse click
            int lineNumber = txtKeywordVerses.getCaretPosition();
            // get line number of caret position
            int line = txtKeywordVerses.getLineOfOffset(lineNumber);
            int startIndex = txtKeywordVerses.getLineStartOffset(line);// set start of line
            int endIndex = txtKeywordVerses.getLineEndOffset(line);// set end of line
            
            // highlight line
            txtKeywordVerses.select(startIndex, endIndex);
            // check for empty line selection
            if (!txtKeywordVerses.getSelectedText().isBlank()||!txtKeywordVerses.getSelectedText().isEmpty())
            {
                // separate selected line
                String[] txt = txtKeywordVerses.getSelectedText().split("   ");//3 spaces
                String[] ref = txt[0].split("  ");//2 spaces
                if (ref.length==2)
                {
                    // set selected values for book, chapter, and verse
                    String newBook = ref[0];
                    String[] cv = ref[1].split(":");
                    String newChapter = cv[0];
                    String newVerse = cv[1];
                    
                    // get current source translation and text values
                    String newSource = cmbSource.getSelectedItem().toString();
                    String newText = cmbText.getSelectedItem().toString();
                    String newTranslation = cmbTranslation.getSelectedItem().toString();
                    
                    // update chapter values
                    updateSearch(newSource,newText,newTranslation,newBook,newChapter,newVerse);
                }
            }
        } 
        catch (BadLocationException ex) // exception thrown
        {
            Logger.getLogger(ReferenceTheSpirit.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (NumberFormatException e){}// exception thrown (converthing String to int)
        catch (NullPointerException en){}// exception thown (too many blank clicks)
    }//GEN-LAST:event_txtKeywordVersesMouseClicked
    // end txtKeyword MouseClicked method
    
    /**
     * txtTheme MouseClicked method for clearing the Theme search box when 
     * clicked
     * @param evt mouse click (Theme)
     */
    private void txtThemeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtThemeMouseClicked
        clearTextBox(txtTheme);
    }//GEN-LAST:event_txtThemeMouseClicked
    // end txtTheme MouseClicked method
    
    /**
     * txtTheme KeyPressed method to check if key is enter.
     * @param evt keys (Theme)
     */
    private void txtThemeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtThemeKeyPressed
        isEnterKey(evt,btnThemeSearch);
    }//GEN-LAST:event_txtThemeKeyPressed
    // end txtTheme keyPressed method
    
    /**
     * btnThemeSearch button method for querying database for Theme verses 
     * @param evt search button pressed (Theme)
     */
    private void btnThemeSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemeSearchActionPerformed
        // set default source and text values
        String source = "Christianity";
        String text = "Bible";
        // get selected translation and search word
        String translation = cmbTranslation.getSelectedItem().toString();
        String word = txtTheme.getText();

        txtThemeVerses.setText("");// clear text area

        if (word.contains("Enter Theme..."))// default value still in text field
        {
            // remove default value
            word = word.replace("Enter Theme...","");
            txtThemeVerses.setText(word);
        }
        try// query database for word and check for SQL exceptions
        {
            if (!word.equals("") || !word.equals(null))
            {
                // instantiate new Theme object
                Theme theme = new Theme(word,text,translation);
                // get matching verses
                String[] results = theme.getVerses();
                String[][] data = theme.getData();

                if (data.length>0)// check if query is null
                {
                    // Append verses to text area
                    for (int i = 0; i<data.length;i++)
                    {
                        if (!data[i][3].equals(""))
                        {
                            // format data into verse format
                            String line =
                            data[i][0]+"  "+data[i][1]+":"+data[i][2]+
                            "   "+data[i][3]+"\n\n";
                            // add verse to text area
                            txtThemeVerses.append(line);
                        }
                    }
                    // scroll to top of results
                    txtThemeVerses.setCaretPosition(0);
                }
                else// no word entered into search
                {
                    String message = "Search input is empty.";
                    String results1 = message+ "\nEnter word to search.";
                    txtThemeVerses.append(results1);
                }
            }
        } catch (NullPointerException e)// null search results, exception thrown
        {
            //e.printStackTrace();
            String message = "There are no results for the term \"" + word + "\"";
            String results1 = message+ "\nSearch for somethong else.";
            txtThemeVerses.append(results1);
        }
    }//GEN-LAST:event_btnThemeSearchActionPerformed
    // end btnThemeSearch button method
    
    /**
     * txtTheme Mouse Click method selects the verse line clicked on by user
     * @param evt mouse click (Theme)
     */
    private void txtThemeVersesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtThemeVersesMouseClicked
                
        try // select line and check for bad location
        {
            // get location of mouse click
            int lineNumber = txtThemeVerses.getCaretPosition();
            // get line number of caret position
            int line = txtThemeVerses.getLineOfOffset(lineNumber);
            int startIndex = txtThemeVerses.getLineStartOffset(line);// set start of line
            int endIndex = txtThemeVerses.getLineEndOffset(line);// set end of line
            // highlight line
            txtThemeVerses.select(startIndex, endIndex);
            // check for empty line selection
            if (!txtThemeVerses.getSelectedText().isBlank()||!txtThemeVerses.getSelectedText().isEmpty())
            {
                // separate selected line
                String[] txt = txtThemeVerses.getSelectedText().split("   ");//3 spaces
                String[] ref = txt[0].split("  ");//2 spaces
                if (ref.length==2)
                {
                    // set selected values for book, chapter, and verse
                    String newBook = ref[0];
                    String[] cv = ref[1].split(":");
                    String newChapter = cv[0];
                    String newVerse = cv[1];
                    
                    // get current source and text values
                    String newSource = "Christianity";
                    String newText = "Bible";
                    String newTranslation = cmbThemeTranslation.getSelectedItem().toString();
                    
                    // update chapter values
                    updateSearch(newSource,newText,newTranslation,newBook,newChapter,newVerse);
                }
            }
        } 
        catch (BadLocationException ex) // exception thrown
        {
            Logger.getLogger(ReferenceTheSpirit.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (NumberFormatException e){}// exception thrown (converthing String to int)
        catch (NullPointerException en){}// exception thown (too many blank clicks)
        
    }//GEN-LAST:event_txtThemeVersesMouseClicked
    // end txtThemeVerses MouseClicked method
    
    /**
     * updateSearch method updates the current chapter text with the selected 
     * verses chapter from the theme or keyword search results
     * @param newSource
     * @param newText
     * @param newTranslation
     * @param newBook
     * @param newChapter
     * @param newVerse 
     */
    public void updateSearch(String newSource, String newText, String newTranslation, String newBook, String newChapter, String newVerse)
    {
        // get current values
        String source = cmbSource.getSelectedItem().toString();
        String text = cmbText.getSelectedItem().toString();
        String translation = cmbTranslation.getSelectedItem().toString();
        String book = cmbBook.getSelectedItem().toString();
        String chapter = cmbChapter.getSelectedItem().toString();
        String verse = cmbVerse.getSelectedItem().toString();
        
        // check for matching text values to prevent update redundancy
        if (!newSource.equals(source))// different source
        {
            cmbSource.setSelectedItem(newSource);// select new source
        }
        if (!newText.equals(text))// different text
        {
            cmbText.setSelectedItem(newText);// select new text
        }
        if (!newTranslation.equals(translation))// different translation
        {
            cmbTranslation.setSelectedItem(newTranslation);// select new translation
        }
        if (!newBook.equals(book))// different book
        {
            cmbBook.setSelectedItem(newBook);// select new book
        }
        if (!newChapter.equals(chapter))// different chapter
        {
            cmbChapter.setSelectedItem(newChapter);// select new chapter
        }
        if (!newVerse.equals(verse))// different verse
        {
            cmbVerse.setSelectedItem(newVerse);// select new verse
        }
    }// end updateSearch method
    
    /**
     * cmbThemeTranslation ItemStateChanged method that refreshes the theme 
     * search results with the new translation selected
     * @param evt translation changed (Theme)
     */
    private void cmbThemeTranslationItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbThemeTranslationItemStateChanged
        String theme = txtTheme.getText();
        if (!theme.equals("")&& !theme.equals("Enter Theme..."))
        {
            btnThemeSearch.doClick();// start query
        }
    }//GEN-LAST:event_cmbThemeTranslationItemStateChanged
    // end cmbThemeTranslation ItemStateChanged method
    
    /**
     * clearTextBox method for clearing a text field
     * @param txtTextBox filed to be cleared
     */
    private void clearTextBox(JTextField txtTextBox)
    {
        txtTextBox.setText("");
    }// end clearTextBox method
    
    /**
     * alignCitationVerses method changes the end verse citation when the selected
     * start verse is greater than the end to prevent citation errors
     * @param cmbVerseStart
     * @param cmbVerseEnd 
     */
    private void alignCitationVerses(JComboBox<String> cmbVerseStart, JComboBox<String> cmbVerseEnd)
    {
        int startIndex = cmbVerseStart.getSelectedIndex();
        int endIndex = cmbVerseEnd.getSelectedIndex();
        
        if (endIndex < startIndex)// end verse smaller than start
        {
            // set end verse equal to start
            cmbVerseEnd.setSelectedIndex(cmbVerseStart.getSelectedIndex());
        }
    }// end alignCitationVerses mehtod

    /**
     * copyText method copies the text within the citation text area
     * @param txtTextArea citation text area (Citation)
     */
    private void copyText(JTextArea txtTextArea)
    {
        // instantiate new StringSelection and Clipboad objects
        StringSelection citation = new StringSelection(txtTextArea.getText());
        Clipboard copy = Toolkit.getDefaultToolkit().getSystemClipboard();
        
        // copy contents to clipboard
        copy.setContents(citation, null);
    }// end copyText method
    
    /**
     * btnTextSiceIncrease button method makes the application font larger
     * @param evt increase text button pressed ("+")
     */
    private void btnTextSizeIncreaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTextSizeIncreaseActionPerformed
        Font font = txtBible.getFont();// get font
        float size = font.getSize() + 1.0f;// increase font

        if (size <= 18)// size under maximum
        {
            // increase font size
            txtBible.setFont(font.deriveFont(size));
            txtKeywordVerses.setFont(font.deriveFont(size));
            txtThemeVerses.setFont(font.deriveFont(size));
        }
    }//GEN-LAST:event_btnTextSizeIncreaseActionPerformed
    // end btnTextSizeIncrease button method
    
    /**
     * btnTextSizeDecrease button method makes the application font smaller
     * @param evt decrease text button pressed ("-")
     */
    private void btnTextSizeDecreaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTextSizeDecreaseActionPerformed
        Font font = txtBible.getFont();// get font
        float size = font.getSize() - 1.0f; // decrease font size

        if (size >= 10)// size above minimum
        {
            // decrease font size
            txtBible.setFont(font.deriveFont(size));
            txtKeywordVerses.setFont(font.deriveFont(size));
            txtThemeVerses.setFont(font.deriveFont(size));
        }
    }//GEN-LAST:event_btnTextSizeDecreaseActionPerformed
    // end btnTextSizeDecrease button method
    
    /**
     * isEnterKey method for determining if user inputs enter key and activating
     * associated tabs command
     * @param evt   key pressed
     * @param button add button to be selected when enter key pressed
     */
    private void isEnterKey(java.awt.event.KeyEvent evt, JButton button)
    {
        int key = evt.getKeyCode(); // get key value
        
        if (key==java.awt.event.KeyEvent.VK_ENTER) // key is enter
        {
            button.doClick();// click button
        }
    }// end isEnter Key emthod
    
    /**
     * btnDarkMode button method changes the color of the background and text 
     * color from dak to light or light to dark
     * @param evt button click (sun button)
     */
    private void btnDarkModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDarkModeActionPerformed

        // set default color
        Color defaultBackground = new Color(214,217,223);
        
        if (blnDefaultColor==false)
        {
            defaultBackground = jPanel2.getBackground();
            blnDefaultColor = true;
        }
        Color background =  btnDarkMode.getBackground();
        Color foreground = btnDarkMode.getForeground();
        Color page = Color.WHITE;
        
        // check for current color
        if (background == Color.DARK_GRAY)// in dark mode
        {
            background = defaultBackground;
            foreground = Color.BLACK;
            page = Color.WHITE;
        }
        else// in light mode
        {
            background = Color.DARK_GRAY;
            foreground = Color.WHITE;
            page = Color.BLACK;
        }
        // Change Colro Background for...
        //buttons
        btnChapterNext.setBackground(background);
        btnChapterPrevious.setBackground(background);
        btnCitation.setBackground(background);
        btnCopy.setBackground(background);
        btnDarkMode.setBackground(background);
        btnKeywordSearch.setBackground(background);
        btnTextSizeDecrease.setBackground(background);
        btnTextSizeIncrease.setBackground(background);
        btnThemeSearch.setBackground(background);
        // combo box
        cmbBook.setBackground(page);
        cmbChapter.setBackground(page);
        cmbCitation.setBackground(page);
        cmbSource.setBackground(page);
        cmbText.setBackground(page);
        cmbTranslation.setBackground(page);
        cmbVerse.setBackground(page);
        cmbVerseEnd.setBackground(page);
        cmbVerseStart.setBackground(page);
        // scroll panes
        jScrollPane2.setBackground(background);
        jScrollPane5.setBackground(background);
        // labels
        lblBookSearch.setBackground(background);
        lblBookSearch3.setBackground(background);
        lblChapterSearch.setBackground(background);
        lblCitationFormat.setBackground(background);
        lblCitationVerseEnd.setBackground(background);
        lblCitationVerseStart.setBackground(background);
        lblSource.setBackground(background);
        lblTextSize.setBackground(background);
        lblTranslation.setBackground(background);
        lblVerseSearch.setBackground(background);
        // panels
        pnlBible.setBackground(background);
        pnlCitation.setBackground(background);
        pnlTextSize.setBackground(background);
        jPanel2.setBackground(background);
        jPanel3.setBackground(background);
        // text fields and areas
        tabSearch.setBackground(page);
        txtBible.setBackground(page);
        txtCitation.setBackground(page);
        txtKeyword.setBackground(page);
        txtKeywordVerses.setBackground(page);
        txtTheme.setBackground(page);
        txtThemeVerses.setBackground(page);
        // tabs
        tabSearch.setBackground(background);
        
        // Change foreground (text) color for...
        // buttons
        btnChapterNext.setForeground(foreground);
        btnChapterPrevious.setForeground(foreground);
        btnCitation.setForeground(foreground);
        btnCopy.setForeground(foreground);
        btnDarkMode.setForeground(foreground);
        btnKeywordSearch.setForeground(foreground);
        btnTextSizeDecrease.setForeground(foreground);
        btnTextSizeIncrease.setForeground(foreground);
        btnThemeSearch.setForeground(foreground);
        // combo boxes
        cmbBook.setForeground(foreground);
        cmbChapter.setForeground(foreground);
        cmbCitation.setForeground(foreground);
        cmbSource.setForeground(foreground);
        cmbText.setForeground(foreground);
        cmbTranslation.setForeground(foreground);
        cmbVerse.setForeground(foreground);
        cmbVerseEnd.setForeground(foreground);
        cmbVerseStart.setForeground(foreground);
        // scroll panes
        jScrollPane2.setForeground(foreground);
        jScrollPane5.setForeground(foreground);
        // labels
        lblBookSearch.setForeground(foreground);
        lblBookSearch3.setForeground(foreground);
        lblChapterSearch.setForeground(foreground);
        lblCitationFormat.setForeground(foreground);
        lblCitationVerseEnd.setForeground(foreground);
        lblCitationVerseStart.setForeground(foreground);
        lblSource.setForeground(foreground);
        lblTextSize.setForeground(foreground);
        lblTranslation.setForeground(foreground);
        lblVerseSearch.setForeground(foreground);
        // panels
        pnlBible.setForeground(foreground);
        pnlCitation.setForeground(foreground);
        pnlTextSize.setForeground(foreground);
        jPanel2.setForeground(foreground);
        jPanel3.setForeground(foreground);
        // text areas and fields
        txtBible.setForeground(foreground);
        txtCitation.setForeground(foreground);
        txtKeyword.setForeground(foreground);
        txtKeywordVerses.setForeground(foreground);
        txtTheme.setForeground(foreground);
        txtThemeVerses.setForeground(foreground);
        // tabs
        tabSearch.setForeground(foreground);
    }//GEN-LAST:event_btnDarkModeActionPerformed
    // end btnDarkMode button method
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReferenceTheSpirit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReferenceTheSpirit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReferenceTheSpirit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReferenceTheSpirit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReferenceTheSpirit().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton btnChapterNext;
    public javax.swing.JButton btnChapterPrevious;
    private javax.swing.JButton btnCitation;
    private javax.swing.JButton btnCopy;
    private javax.swing.JButton btnDarkMode;
    public javax.swing.JButton btnKeywordSearch;
    private javax.swing.JButton btnTextSizeDecrease;
    private javax.swing.JButton btnTextSizeIncrease;
    public javax.swing.JButton btnThemeSearch;
    public javax.swing.JComboBox<String> cmbBook;
    public javax.swing.JComboBox<String> cmbChapter;
    private javax.swing.JComboBox<String> cmbCitation;
    public javax.swing.JComboBox<String> cmbSource;
    public javax.swing.JComboBox<String> cmbText;
    public javax.swing.JComboBox<String> cmbThemeTranslation;
    public javax.swing.JComboBox<String> cmbTranslation;
    private javax.swing.JComboBox<String> cmbVerse;
    private javax.swing.JComboBox<String> cmbVerseEnd;
    private javax.swing.JComboBox<String> cmbVerseStart;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JLabel lblBookSearch;
    private javax.swing.JLabel lblBookSearch3;
    private javax.swing.JLabel lblChapterSearch;
    private javax.swing.JLabel lblCitationFormat;
    private javax.swing.JLabel lblCitationVerseEnd;
    private javax.swing.JLabel lblCitationVerseStart;
    private javax.swing.JLabel lblSource;
    private javax.swing.JLabel lblTextSize;
    private javax.swing.JLabel lblThemeTranslation;
    private javax.swing.JLabel lblTranslation;
    private javax.swing.JLabel lblVerseSearch;
    private javax.swing.JPanel pnlBible;
    private javax.swing.JPanel pnlCitation;
    private javax.swing.JPanel pnlTextSize;
    private javax.swing.JTabbedPane tabSearch;
    private javax.swing.JTextArea txtBible;
    private javax.swing.JTextArea txtCitation;
    public javax.swing.JTextField txtKeyword;
    public javax.swing.JTextArea txtKeywordVerses;
    public javax.swing.JTextField txtTheme;
    public javax.swing.JTextArea txtThemeVerses;
    // End of variables declaration//GEN-END:variables
}
